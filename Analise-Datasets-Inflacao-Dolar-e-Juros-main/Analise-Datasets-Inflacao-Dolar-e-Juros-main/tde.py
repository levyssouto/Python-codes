# -*- coding: utf-8 -*-
"""TDE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MZbuvdSlJR6AnOfWkjtGvL0hBs8OYAOf
"""

import matplotlib.pyplot as plt #importa bibliotecas que serão utilizadas
import numpy as np
import pandas as pd

from google.colab import drive #trecho de código carrega google drive
drive.mount('/content/drive')#utiliza método mount para carregar conteúdo do google drive

"""# **COTAÇÃO DÓLAR**"""

"""TRATANDO DADOS
arrumando datasets para manipulação"""

dolar= pd.read_csv('/content/drive/MyDrive/TDE/Cotação do Dólar por período.csv')#instancia um objeto da classe pandas.core.frame.DataFrame pelo método read_csv
# capaz de ler arquivos .csv, recebe path do dataset no drive como parâmetro


dolar = dolar.replace(',','.',regex = True).astype(float)#método replace substitui valores do dataset de maneira dinâmica, no caso transfomando valores 
#de String para float. Recebe como parêmetro os valores a serem susbstitídos, e método astype muda o tipo de uma série de dados

dolar = dolar.reset_index()#método reset_index cria uma nova coluna a partir do índice anterior com o numero de dias

dolar = dolar.rename({'index': 'Dias'},axis=1)#método rename renomeia a nova coluna criada recebendo um dicionário como parâmetro

print(dolar.info())#método info não recebe parâmetros e retorna um sumário conciso sobre o dataset instanciado 

print("\ntipo do objeto dolar: ", type(dolar))# função type retorna o tipo do objeto dolar, no caso sua classe

dolar.head() #método head retorna 5 primeiras linhas do dataset

a = np.array(dolar["cotacaoCompra"])#  instancia um objeto da classe numpy.ndarray, recebe como parâmetro o objeto dataframe instanciado anteriormente
#com a coluna da cotacao do dólar.

#modulo plt
plt.title('Dólar entre janeiro de 2019 e 2022')# utiliza método title para plotar título do gráfico

plt.xlabel('Dias') #metodo xlabel define nome para eixo x

plt.ylabel('Variação')# metodo ylabel define nome para eixo y

plt.plot(a,color = 'green')# método plot cria gráfico, recebendo; x = dias; y = dólar

dolar['cotacaoCompra'].describe() # método describe do pandas retorna informações estatisticas

"""# **IPCA**"""

ipca = pd.read_csv('/content/drive/MyDrive/TDE/IPCA_arrumado.csv',sep=';', names = ["Data", "Taxa"])#instancia um objeto da classe pandas.core.frame.DataFrame pelo método read_csv
#recebe path do dataset no drive como parâmetro, também um caractere separador de colunas e os nomes das colunas


ipca = ipca.reset_index()# método reset_index cria uma nova coluna a partir do índice anterior com o numero de meses

ipca = ipca.rename({'index': 'Meses'},axis=1)# método rename renomeia a nova coluna criada recebendo um dicionário como parâmetro, e o eixo da coluna

ipca = ipca.iloc[295:332] # método iloc de seleção de dados em lista

data_types_dict = {'Taxa': float}# cria dicionario para mudar o tipo de dado da coluna selecionada

ipca = ipca.astype(data_types_dict)# método astype do pandas altera o tipo de dado de uma séria, recebe um dicionário como parâmetro

ipca.head()#método head retorna 5 primeiras linhas da base de dados sobre índice IPCA

taxa = np.array(ipca["Taxa"])#  instancia um objeto da classe numpy.ndarray, recebe como parâmetro o objeto dataframe instanciado anteriormente
#com a coluna do IPCA.
plt.title('IPCA entre janeiro de 2019 e 2022')# utiliza método title para plotar título do gráfico

plt.xlabel('Meses')# metodo xlabel define nome para eixo x


plt.ylabel('Variação')# metodo ylabel define nome para eixo y


plt.plot(taxa,color = 'blue',marker = 'o')# método plot cria gráfico, recebe um objeto numpy.ndarray, uma cor e um marcador como parâmetros;
# x = meses; y = IPCA

plt.grid('True') # método grid cria uma grade no plano de fundo do gráfico, default = 'False', recebe parâmetro String 'True' ou 'False'.

plt.show()# método show apresenta último gráfico criado com o módulo plt

display(ipca['Taxa'].describe())# método describe do pandas retorna informações estatisticas

"""# **TAXA SELIC**"""

selic = pd.read_csv('/content/drive/MyDrive/TDE/taxa_selic.csv',sep=';') # instancia um objeto da classe pandas.core.frame.DataFrame pelo método read_csv
#recebe path do dataset no drive como parâmetro, também um caractere separador de colunas


selic = selic.rename({'11 - Taxa de juros - Selic - % a.d.': 'Taxa Selic'},axis=1)# método rename renomeia a nova coluna criada recebendo um dicionário como parâmetro

selic = selic.drop([776],axis=0)# método drop retira linha ou coluna do dataframe e recebe como parâmetro uma seleção e um eixo, foi removida a última linha.

selic['Taxa Selic'] = selic['Taxa Selic'].replace(',','.',regex = True).astype(float)#método replace substitui valores do dataset de maneira dinâmica, no caso transfomando valores 
#de String para float. Recebe como parêmetro os valores a serem susbstitídos, e método astype muda o tipo da série de dados

selic = selic.reset_index()# método reset_index cria uma nova coluna a partir do índice anterior com o numero de dias

selic = selic.rename({'index': 'Dias'},axis=1)# método rename renomeia a nova coluna criada recebendo um dicionário como parâmetro

selic = selic[0:757]# seleciona os 756 dias

# Gráfico de Barras
c=np.array(selic['Dias'])#  instancia um objeto da classe numpy.ndarray, recebe como parâmetro o objeto dataframe instanciado anteriormente
#com a coluna do IPCA. c = dias

d=np.array(selic["Taxa Selic"])#  instancia um objeto da classe numpy.ndarray, recebe como parâmetro o objeto dataframe instanciado anteriormente
#com a coluna do IPCA. d = variação selic

plt.title('Selic entre janeiro de 2019 e 2022')# utiliza método title para plotar título do gráfico

plt.xlabel('Dias')# metodo xlabel define nome para eixo x

plt.ylabel('Variação')# metodo ylabel define nome para eixo y

plt.bar(c,d,width=1,color='red')# método bar cria um gráfico de barras recebe como parâmetros os eixos x,y; a largura das barras, e a cor

plt.grid('True')# método grid cria uma grade no plano de fundo

plt.show()# método show apresenta último gráfico criado com o módulo plt

display(selic['Taxa Selic'].describe())# método describe do pandas retorna informações estatisticas